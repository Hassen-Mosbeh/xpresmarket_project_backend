generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model category {
  category_id    Int       @id @default(autoincrement())
  category_name  String    @unique @db.VarChar(255)
  descp_category String?   @db.Text
  product        product[]
}

model product {
  product_id         Int         @id @default(autoincrement())
  product_name       String      @db.VarChar(255)
  description        String?     @db.Text
  price              Decimal     @db.Decimal(10, 2)
  stock              Int         @default(0)
  status             Boolean?    @default(true)
  image              String?     @db.VarChar(255)
  category_id        Int?
  ownerId            Int
  createdAtpnproduct DateTime    @default(now())
  orderItems         OrderItem[]
  category           category?   @relation(fields: [category_id], references: [category_id], onUpdate: NoAction, map: "product_ibfk_1")
  owner              user        @relation(fields: [ownerId], references: [id])

  @@index([category_id], map: "category_id")
  @@index([ownerId], map: "product_ownerId_fkey")
}

model Order {
  order_id       Int         @id @default(autoincrement())
  user_id        Int
  payment_method String      @db.VarChar(50)
  payment_id     String?
  date           DateTime    @default(now())
  status         orderStatus @default(Pending)
  total_amount   Decimal     @db.Decimal(10, 2)
  items          OrderItem[]
  user           user        @relation(fields: [user_id], references: [id])

  @@index([user_id], map: "orders_user_id_fkey")
  @@map("orders")
}

model OrderItem {
  item_id    Int     @id @default(autoincrement())
  order_id   Int
  product_id Int
  quantity   Int
  price      Decimal @db.Decimal(10, 2)
  order      Order   @relation(fields: [order_id], references: [order_id])
  product    product @relation(fields: [product_id], references: [product_id])

  @@index([order_id], map: "order_items_order_id_fkey")
  @@index([product_id], map: "order_items_product_id_fkey")
  @@map("order_items")
}

model contact {
  id           Int    @id @default(autoincrement())
  name         String @db.VarChar(255)
  email        String @unique(map: "Contact_email_key") @db.VarChar(255)
  phone_number String @db.VarChar(20)
  subject      String @db.VarChar(255)
  content      String @db.Text
}

model message {
  id                            Int      @id @default(autoincrement())
  senderId                      Int
  receiverId                    Int
  content                       String   @db.Text
  timestamp                     DateTime @default(now())
  user_message_receiverIdTouser user     @relation("message_receiverIdTouser", fields: [receiverId], references: [id], map: "Message_receiverId_fkey")
  user_message_senderIdTouser   user     @relation("message_senderIdTouser", fields: [senderId], references: [id], map: "Message_senderId_fkey")

  @@index([receiverId], map: "Message_receiverId_fkey")
  @@index([senderId], map: "Message_senderId_fkey")
}

model user {
  id                               Int         @id @default(autoincrement())
  username                         String?
  email                            String      @unique(map: "User_email_key")
  password                         String
  telephone                        String
  company_name                     String?
  company_adresse                  String?
  company_tel                      String?
  createdAt                        DateTime    @default(now())
  profile                          String      @default("Buyer")
  company_email                    String?     @db.VarChar(255)
  resetCode                        String?
  resetCodeExpiresAt               DateTime?
  picture                          String?
  status                           user_status @default(active)
  message_message_receiverIdTouser message[]   @relation("message_receiverIdTouser")
  message_message_senderIdTouser   message[]   @relation("message_senderIdTouser")
  orders                           Order[]
  products                         product[]
}

enum orderStatus {
  Pending
  Processing
  Ready
}

enum user_status {
  active
  inactive
  deleted
}
